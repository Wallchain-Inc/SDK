import type { ExternalProvider } from '@ethersproject/providers';

import { assert } from 'chai'
import sinon from 'sinon';
import WallchainSDK from "../src";
import { HttpProvider } from 'web3-providers-http';
import WallchainKeys from './../keys.json';
import dotenv from 'dotenv';
import 'whatwg-fetch';
import * as utils from '../src/utils';

dotenv.config();

const serverReponse = {
    pathFound: true,
    summary: {
        searchSummary: {
            expectedKickbackProfit: '750',
            expectedProfit: '750',
            expectedUsdProfit: '750',
            firstTokenAddress: '0x',
            firstTokenAmount: '0xF',
        }
    },
    transactionArgs: {
        data: '',
        destination: 'WALLCHAIN_CONTRACT',
        value: '0xF',
        masterInput: "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000076617b72315ddb000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bc8a4cad743d87e8754fd5f704c62e378802cbff000000000000000000000000edb1f18ae8aee807a7a6fa1b03cc02326aa3a95d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ed7e52944161450477ee417de9cd3a859b14fd0",
        gas:                  null,
        gasPrice:             null,
        maxFeePerGas:         null,
        maxPriorityFeePerGas: null,
        nonce:                null,
        sender:               null
    }
}


const rawTxn = {
    from: '0x3e66Ffa87F50fbaC724AAD9E2D95C8582d012F67',
    to: '0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7',
    data: '0x18cbafe50000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000000000000000000000000000297dbb4b85b1cd8700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000093b2c863a14463215df926940800577484e74c720000000000000000000000000000000000000000000000000000000064ba85290000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bd83010eb60f12112908774998f65761cf9f6f9a000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',
    value: '0x53a4fe2f204e80e00000',
    gas: '0x0',
}

const masterInput = '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000076617b72315ddb000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bc8a4cad743d87e8754fd5f704c62e378802cbff000000000000000000000000edb1f18ae8aee807a7a6fa1b03cc02326aa3a95d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ed7e52944161450477ee417de9cd3a859b14fd0';


describe('main methods', function () {
    const provider = new HttpProvider(process.env.WALLCHAIN_RPC_URL as string) as unknown as ExternalProvider;

    const sdk = new WallchainSDK({
        provider,
        keys: WallchainKeys
    });
    const prevFetch = window.fetch;


    test('should get responce from server', async () => {
        const resp = await sdk.checkForMEV(rawTxn);
        assert.deepEqual(resp, {
            MEVFound: false
        });
    });

    test('should parse response correctly', async () => {
        const newFetch = sinon.stub(window, 'fetch');
        //@ts-expect-error
        newFetch.callsFake(async () => ({ json: async () => serverReponse }))
        const resp = await sdk.checkForMEV(rawTxn);
        assert.deepEqual(resp, {
            MEVFound: true,
            masterInput: '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000076617b72315ddb000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bc8a4cad743d87e8754fd5f704c62e378802cbff000000000000000000000000edb1f18ae8aee807a7a6fa1b03cc02326aa3a95d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ed7e52944161450477ee417de9cd3a859b14fd0',
            cashbackAmount: '750',
        });
        newFetch.reset();
        window.fetch = prevFetch;
    });

    test('should fail if response is not valid', async () => {
        const newFetch = sinon.stub(window, 'fetch');

        //@ts-expect-error
        newFetch.callsFake(async () => ({ json: async () => { dummy: true } }))
        try {
            const resp = await sdk.checkForMEV(rawTxn);
        } catch (e) {
            assert.equal((e as Error).name, 'ZodError');
        }
        newFetch.reset();
        window.fetch = prevFetch;
    });

    test('should fail if timeout is reached', async () => {
        const newFetch = sinon.stub(window, 'fetch');
        //@ts-expect-error
        newFetch.callsFake(async () => {
            await new Promise((res) => setTimeout(res, 7000));
            return { json: async () => { dummy: true } };
        });

        try {
            const resp = await sdk.checkForMEV(rawTxn);
        } catch (e) {
            assert.equal((e as Error).message, 'Wallchain error: request timeout reached.');
        }
        newFetch.reset();
    }, 10000);

    test('should correctly form new transaction data', async () => {
        const stub = sinon.stub(utils, 'randNonce');
        stub.callsFake(() => '0x1234');

        const trans = await sdk.createNewTransaction({
            ...rawTxn,
            srcToken: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
            dstToken: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',
            amountIn: '0x53a4fe2f204e80e00000',
            isPermit: false,
        }, masterInput)

        assert.deepEqual(trans, {
            from: '0x3e66Ffa87F50fbaC724AAD9E2D95C8582d012F67',
            to: '0x4DeF20E7DbfeAB6b2cFEB53bdcA28a6DCEd12317',
            data: '0xd3e96e4f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b7000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000620000000000000000000000000000000000000000000000000000000000000010418cbafe50000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000000000000000000000000000297dbb4b85b1cd8700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000093b2c863a14463215df926940800577484e74c720000000000000000000000000000000000000000000000000000000064ba85290000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bd83010eb60f12112908774998f65761cf9f6f9a000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000076617b72315ddb000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bc8a4cad743d87e8754fd5f704c62e378802cbff000000000000000000000000edb1f18ae8aee807a7a6fa1b03cc02326aa3a95d0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000cf0febd3f17cef5b47b0cd257acf6025c5bff3b700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000ed7e52944161450477ee417de9cd3a859b14fd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
            value: '0x53a4fe2f204e80e00000',
            gas: '0x2625A0',
        })

    });
});

