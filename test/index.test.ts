import type { ExternalProvider } from '@ethersproject/providers';
import { assert } from 'chai'
import sinon from 'sinon';
import WallchainSDK from "../src";
import { HttpProvider } from 'web3-providers-http';
import WallchainKeys from './../keys.json';
import dotenv from 'dotenv';
import 'whatwg-fetch';
import * as utils from '../src/utils';

dotenv.config();

const serverReponse = {
    backRun: {
        "searcherRequest": {
            to: "0xEc730115C0D65ABfCc89642BcdabCAcD7E0E788C",
            gas: 1000000,
            nonce: "0x693d9fb64a0a0f6552b11b46199ab3fb645305c208d34083167679497bbd3af6",
            data: "0xfe0d94c100000000000000000000000000000000000000000000000000000002540be400",
            bid: "0x2540be400",
            userCallHash: "0xba6ed4f70a6f4182a73d9dfec46d0583c37818f9cb268a26989bbf6633750b36",
            maxGasPrice: "0x12a05f200",
            deadline: 1692618882
        },
        searcherSignature: "0x4100633b2c57d4554710f31a55fa44265ac7acdc2626777b46e3a868212accb92d6cc4e01e1825786bd0d0937534391b7ae90ce70d9b1c187e8c490fbf8588161c",
        expectedUsdProfit: 750
    }
}


const rawTxn = {
    from: '0x3e66Ffa87F50fbaC724AAD9E2D95C8582d012F67',
    to: '0xcF0feBd3f17CEf5b47b0cD257aCf6025c5BFf3b7',
    data: '0x18cbafe50000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000000000000000000000000000297dbb4b85b1cd8700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000093b2c863a14463215df926940800577484e74c720000000000000000000000000000000000000000000000000000000064ba85290000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bd83010eb60f12112908774998f65761cf9f6f9a000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',
    value: '0x53a4fe2f204e80e00000',
    gas: '0x0',
}


describe('sdk tests', function () {
    const provider = new HttpProvider(process.env.WALLCHAIN_RPC_URL as string) as unknown as ExternalProvider;

    const sdk = new WallchainSDK({
        provider,
        keys: WallchainKeys
    });
    const prevFetch = window.fetch;

    test('should parse response correctly', async () => {
        const newFetch = sinon.stub(window, 'fetch');
        //@ts-expect-error
        newFetch.callsFake(async () => ({ json: async () => serverReponse }))
        const resp = await sdk.checkForMEV(rawTxn);
        assert.deepEqual(resp, {
            MEVFound: true,
            searcherRequest: serverReponse.backRun.searcherRequest,
            cashbackAmount: '750',
            searcherSignature: serverReponse.backRun.searcherSignature
        });
        newFetch.reset();
        window.fetch = prevFetch;
    });

    test('should fail if response is not valid', async () => {
        const newFetch = sinon.stub(window, 'fetch');

        //@ts-expect-error
        newFetch.callsFake(async () => ({ json: async () => { dummy: true } }))
        try {
            const resp = await sdk.checkForMEV(rawTxn);
        } catch (e) {
            assert.equal((e as Error).name, 'ZodError');
        }
        newFetch.reset();
        window.fetch = prevFetch;
    });

    test('should fail if timeout is reached', async () => {
        const newFetch = sinon.stub(window, 'fetch');
        //@ts-expect-error
        newFetch.callsFake(async () => {
            await new Promise((res) => setTimeout(res, 7000));
            return { json: async () => { dummy: true } };
        });

        try {
            const resp = await sdk.checkForMEV(rawTxn);
        } catch (e) {
            assert.equal((e as Error).message, 'Wallchain error: request timeout reached.');
        }
        newFetch.reset();
    }, 10000);

    test('should correctly form new transaction data', async () => {
        const stub = sinon.stub(utils, 'randNonce');
        stub.callsFake(() => '0x1234');

        const trans = await sdk.createNewTransaction(
            '0x3e66Ffa87F50fbaC724AAD9E2D95C8582d012F67',
            false,
            rawTxn.data,
            '0x53a4fe2f204e80e00000',
            '0x53a4fe2f204e80e00000',
            '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',
            '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',
            serverReponse.backRun.searcherSignature,
            serverReponse.backRun.searcherRequest
        )

        assert.deepEqual(trans, {
            from: '0x3e66Ffa87F50fbaC724AAD9E2D95C8582d012F67',
            to: '0x4DeF20E7DbfeAB6b2cFEB53bdcA28a6DCEd12317',
            data: '0x359045ce00000000000000000000000000000000000000000000000000000000000000200000000000000000000000003e66ffa87f50fbac724aad9e2d95c8582d012f670000000000000000000000003e66ffa87f50fbac724aad9e2d95c8582d012f67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000010418cbafe50000000000000000000000000000000000000000000053a4fe2f204e80e00000000000000000000000000000000000000000000000000000297dbb4b85b1cd8700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000093b2c863a14463215df926940800577484e74c720000000000000000000000000000000000000000000000000000000064ba85290000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bd83010eb60f12112908774998f65761cf9f6f9a000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec730115c0d65abfcc89642bcdabcacd7e0e788c00000000000000000000000000000000000000000000000000000000000f4240693d9fb64a0a0f6552b11b46199ab3fb645305c208d34083167679497bbd3af6000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000002540be400ba6ed4f70a6f4182a73d9dfec46d0583c37818f9cb268a26989bbf6633750b36000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000064e350820000000000000000000000000000000000000000000000000000000000000024fe0d94c100000000000000000000000000000000000000000000000000000002540be4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000414100633b2c57d4554710f31a55fa44265ac7acdc2626777b46e3a868212accb92d6cc4e01e1825786bd0d0937534391b7ae90ce70d9b1c187e8c490fbf8588161c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
            value: '0x53a4fe2f204e80e00000',
            gas: '0x2625A0',
        })

    });
});

